---
- name: Create required files for ABI deployment
  hosts: localhost
  gather_facts: false
  vars:
    control_plane_networks: "{{ vms.controlPlaneData.networks }}"
    compute_networks: "{{ vms.computeData.networks if computeReplicas > 0 and vms.computeData is defined else [] }}"

  tasks:
  - name: Store clusterDir in a fact
    ansible.builtin.set_fact: clusterDir="{{ clusterBaseDir|default('../clusters') }}/{{ name }}.{{ baseDomain }}"

  - name: Remove destination directory (if any)
    ansible.builtin.shell: "rm -vfr {{ clusterDir }}"

  - name: Create destination directory
    ansible.builtin.file:
      path: "{{ clusterDir }}"
      state: directory

  - name: Generate MAC addresses if not already generated
    ansible.builtin.include_tasks: tasks/generate-macs.yaml
    when: node_macs is not defined

  - name: Initialize node_ips as empty dict
    ansible.builtin.set_fact:
      node_ips: {}

  - name: Generate IP addresses for each node sequentially
    ansible.builtin.set_fact:
      node_ips: "{{ node_ips | default({}) | combine({item|string: ip_address}) }}"
    vars:
      base_ip: "{{ machineNetwork.firstIP }}"
      ip_parts: "{{ base_ip.split('.') }}"
      last_octet: "{{ (ip_parts[3] | int) + (item | int) }}"
      ip_address: "{{ ip_parts[0:3] | join('.') + '.' + (last_octet | string) }}"
    with_sequence: start=0 end="{{ controlPlaneReplicas + computeReplicas - 1 }}"
    when: machineNetwork.firstIP is defined

  - name: Set DHCP/static IP mode based on firstIP
    ansible.builtin.set_fact:
      use_dhcp: "{{ machineNetwork.firstIP is not defined }}"

  - name: Prepare network nodes data
    ansible.builtin.set_fact:
      network_nodes: "{{ network_nodes | default([]) + [{
        'hostname': 'node%02d.%s.%s' | format(i, name, baseDomain),
        'node_data': {
          'networks': node_macs[i|string],
          'ip': node_ips[i|string] if node_ips is defined and i|string in node_ips else None,
          'prefix_length': machineNetwork.cidr.split('/')[1],
          'use_dhcp': use_dhcp,
          'bond_interfaces': (i|int >= controlPlaneReplicas|int) | ternary(
            compute_networks | selectattr('type', 'defined') | selectattr('type', 'equalto', 'bond') | list if computeReplicas > 0 and compute_networks is defined else [],
            control_plane_networks | selectattr('type', 'defined') | selectattr('type', 'equalto', 'bond') | list
          )
        },
        'node_overrides': templateOverrides.vms['node%02d.%s.%s' | format(i, name, baseDomain)] if templateOverrides.vms is defined and 'node%02d.%s.%s' | format(i, name, baseDomain) in templateOverrides.vms else {}
      }] }}"
    loop: "{{ range(0, controlPlaneReplicas + computeReplicas) | list }}"
    loop_control:
      loop_var: i

  - name: Build network configuration for each node
    ansible.builtin.include_tasks: tasks/build-network-config.yaml

  - name: Debug network configuration variables
    ansible.builtin.debug:
      var: "{{ item }}"
    loop:
      - node_macs
      - node_ips
      - network_configs

  - name: Generate ABI input files
    ansible.builtin.template:
      src: "../templates/{{ item }}.j2"
      dest: "{{ clusterDir }}/{{ item }}"
    vars:
      node_macs: "{{ node_macs }}"
      node_ips: "{{ node_ips }}"
      network_configs: "{{ network_configs | default({}) }}"
    with_items:
    - install-config.yaml
    - agent-config.yaml

  - name: Generate ABI input files (backups)
    ansible.builtin.template:
      src: "../templates/{{ item }}.j2"
      dest: "{{ clusterDir }}/{{ item }}.orig"
    vars:
      node_macs: "{{ node_macs }}"
      node_ips: "{{ node_ips }}"
    with_items:
    - install-config.yaml
    - agent-config.yaml
