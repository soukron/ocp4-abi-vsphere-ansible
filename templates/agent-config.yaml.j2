---
apiVersion: v1alpha1
kind: AgentConfig
metadata:
  name: {{ name }}
rendezvousIP: {{ machineNetwork.rendezvousIP if machineNetwork.rendezvousIP is defined else machineNetwork.firstIP }}
hosts:
{% for i in range(controlPlaneReplicas|int + computeReplicas|int) %}
{%- set hostname = "node%02d.%s.%s"|format(i, name, baseDomain) %}
{%- set networks = control_plane_networks if i < controlPlaneReplicas|int else compute_networks %}
{%- set prefix = machineNetwork.cidr.split('/')[1] %}
{%- set nameserver = machineNetwork.nameserver %}
{%- set gateway = machineNetwork.gateway %}
{%- set node_overrides = templateOverrides.vms[hostname] if templateOverrides.vms is defined and hostname in templateOverrides.vms else {} %}
{%- set interface_overrides = {} %}
{%- if node_overrides.interfaces is defined %}
{%-   for override in node_overrides.interfaces %}
{%-     set _ = interface_overrides.update({override.name: override}) %}
{%-   endfor %}
{%- endif %}
- hostname: {{ hostname }}
  role: {{ 'master' if i < controlPlaneReplicas|int else 'worker' }}
  interfaces:
{% for network in networks %}
  - name: {{ network.name }}
    macAddress: {{ node_macs[i|string][network.name].mac }}
{% endfor %}
  rootDeviceHints:
    deviceName: /dev/sda
  networkConfig:
    interfaces:
{% for network in networks %}
    - name: {{ network.name }}
      type: ethernet
      state: up
      mac-address: {{ node_macs[i|string][network.name].mac }}
      ipv4:
        enabled: {{ 'true' if loop.first or network.dhcp is defined and network.dhcp or network.name in interface_overrides else 'false' }}
{% if network.name in interface_overrides %}
        address:
        - ip: {{ interface_overrides[network.name].ipv4.address }}
          prefix-length: {{ interface_overrides[network.name].ipv4['prefix-length'] }}
        dhcp: false
{% elif loop.first and not (network.dhcp is defined and network.dhcp) %}
        address:
        - ip: {{ node_ips[i|string] }}
          prefix-length: {{ prefix }}
        dhcp: false
{% elif network.dhcp is defined and network.dhcp %}
        dhcp: true
{% endif %}
      ipv6:
        enabled: false
{% endfor %}
    dns-resolver:
      config:
        server:
        - {{ nameserver }}
    routes:
      config:
      - destination: 0.0.0.0/0
        next-hop-address: {{ node_overrides.gateway.address | default(gateway) }}
        next-hop-interface: {{ node_overrides.gateway.interface | default(networks[0].name) }}
{% endfor %}
