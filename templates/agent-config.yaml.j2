---
apiVersion: v1alpha1
kind: AgentConfig
metadata:
  name: {{ name }}
rendezvousIP: {{ machineNetwork.rendezvousIP if machineNetwork.rendezvousIP is defined else machineNetwork.firstIP }}
hosts:
{% for i in range(controlPlaneReplicas|int + computeReplicas|int) %}
{%- set hostname = "node%02d.%s.%s"|format(i, name, baseDomain) %}
{%- set networks = node_macs[i|string] %}
{%- set prefix = machineNetwork.cidr.split('/')[1] %}
{%- set nameserver = machineNetwork.nameserver %}
{%- set gateway = machineNetwork.gateway %}
{%- set node_overrides = templateOverrides.vms[hostname] if templateOverrides.vms is defined and hostname in templateOverrides.vms else {} %}
{%- set interface_overrides = {} %}
{%- if node_overrides.interfaces is defined %}
{%-   for override in node_overrides.interfaces %}
{%-     set _ = interface_overrides.update({override.name: override}) %}
{%-   endfor %}
{%- endif %}
{%- set vmData = vms.controlPlaneData if i < controlPlaneReplicas|int else vms.computeData %}
{%- set original_networks = vmData.networks %}
{%- set bond_interfaces = [] %}
{%- set individual_interfaces = [] %}
{%- for network in original_networks %}
{%-   if network.type is defined and network.type == 'bond' %}
{%-     set _ = bond_interfaces.append(network) %}
{%-   else %}
{%-     set _ = individual_interfaces.append(network) %}
{%-   endif %}
{%- endfor %}
- hostname: {{ hostname }}
  role: {{ 'master' if i < controlPlaneReplicas|int else 'worker' }}
  interfaces:
{% for name, network in networks.items() %}
  - name: {{ name }}
    macAddress: {{ network.mac }}
{% endfor %}
  rootDeviceHints:
    deviceName: /dev/sda
  networkConfig:
    interfaces:
{% for name, network in networks.items() %}
    - name: {{ name }}
      type: ethernet
      state: up
      mac-address: {{ network.mac }}
      ipv4:
        enabled: {{ 'true' if loop.first or network.dhcp is defined and network.dhcp or name in interface_overrides else 'false' }}
{% if name in interface_overrides %}
        address:
        - ip: {{ interface_overrides[name].ipv4.address }}
          prefix-length: {{ interface_overrides[name].ipv4['prefix-length'] }}
        dhcp: false
{% elif loop.first and not (network.dhcp is defined and network.dhcp) %}
        address:
        - ip: {{ node_ips[i|string] }}
          prefix-length: {{ prefix }}
        dhcp: false
{% elif network.dhcp is defined and network.dhcp %}
        dhcp: true
{% endif %}
      ipv6:
        enabled: false
{% endfor %}
{% for bond in bond_interfaces %}
    - name: {{ bond.name }}
      type: bond
      state: up
      link-aggregation:
        mode: {{ bond['link-aggregation'].mode }}
        options:
          miimon: {{ bond['link-aggregation'].options.miimon }}
        port:
{% for port in bond['link-aggregation'].port %}
        - {{ port }}
{% endfor %}
      ipv4:
        enabled: {{ 'true' if loop.first else 'false' }}
{% if loop.first %}
        address:
        - ip: {{ node_ips[i|string] }}
          prefix-length: {{ prefix }}
        dhcp: false
{% endif %}
      ipv6:
        enabled: false
{% endfor %}
    dns-resolver:
      config:
        server:
        - {{ nameserver }}
    routes:
      config:
      - destination: 0.0.0.0/0
        next-hop-address: {{ node_overrides.gateway.address | default(gateway) }}
        next-hop-interface: {{ node_overrides.gateway.interface | default(networks.keys() | list | first) }}
{% endfor %}
